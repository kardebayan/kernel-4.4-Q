/*
 * Copyright (C) 2016 MediaTek Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See http://www.gnu.org/licenses/gpl-2.0.html for more details.
 */

#ifndef __MTK_HRT_H__
#define __MTK_HRT_H__

#include "disp_session.h"
#include "disp_lcm.h"
#include "disp_drv_log.h"
#include "primary_display.h"
#include "disp_drv_platform.h"
#include "display_recorder.h"

#define PRIMARY_OVL_LAYER_NUM PRIMARY_SESSION_INPUT_LAYER_COUNT
#define SECONDARY_OVL_LAYER_NUM EXTERNAL_SESSION_INPUT_LAYER_COUNT

#define MAX_PHY_OVL_CNT 12
/* #define HAS_LARB_HRT */

/* #define HRT_DEBUG_LEVEL1 */
/* #define HRT_DEBUG_LEVEL2 */
/* #define HRT_UT_DEBUG */
#define PARTIAL_L0_YUV_ONLY
#define PARTIAL_PMA_L0_YUV_ONLY
#define RSZ_SCALE_RATIO_ROLLBACK

#define PATH_FMT_RSZ_SHIFT 9
#define PATH_FMT_PIPE_SHIFT 7
#define PATH_FMT_DISP_SHIFT 5
#define PATH_FMT_ID_SHIFT 0

#define MAKE_UNIFIED_HRT_PATH_FMT(rsz_type, pipe_type, disp_type, id) \
	( \
	((rsz_type)		<< PATH_FMT_RSZ_SHIFT)	| \
	((pipe_type)		<< PATH_FMT_PIPE_SHIFT)	| \
	((disp_type)		<< PATH_FMT_DISP_SHIFT)	| \
	((id)			<< PATH_FMT_ID_SHIFT))

struct hrt_sort_entry {
	struct hrt_sort_entry *head, *tail;
	struct layer_config *layer_info;
	int key;
	int overlap_w;
};

enum HRT_PATH_RSZ_TYPE {
	HRT_PATH_RSZ_NONE = 0,
	HRT_PATH_RSZ_GENERAL,
	HRT_PATH_RSZ_PARTIAL,
	HRT_PATH_RSZ_PARTIAL_PMA,
};

enum HRT_PATH_PIPE_TYPE {
	HRT_PATH_PIPE_SINGLE = 0,
	HRT_PATH_PIPE_DUAL,
};

enum HRT_PATH_DISP_TYPE {
	HRT_PATH_DISP_SINGLE = 0,
	HRT_PATH_DISP_DUAL_MIRROR,
	HRT_PATH_DISP_DUAL_EXT,
};

enum HRT_TB_TYPE {
	HRT_TB_TYPE_GENERAL = 0,
	HRT_TB_NUM,
};

enum HRT_LEVEL {
	HRT_LEVEL_ULPM = 0,	/* OPP3 */
	HRT_LEVEL_LPM,		/* OPP2 */
	HRT_LEVEL_HPM,		/* OPP1 */
	HRT_LEVEL_UHPM,		/* OPP0 */

	HRT_LEVEL_NUM,
};

enum {
	HRT_LEVEL_DEFAULT = HRT_LEVEL_NUM + 1,
};

enum HRT_BOUND_TYPE {
	HRT_BOUND_TYPE_LP4 = 0,		/* LP4-2ch */
	HRT_BOUND_TYPE_LP3,			/* LP3-1ch */
	HRT_BOUND_TYPE_LP4_1CH,		/* LP4-1ch */
	HRT_BOUND_TYPE_LP4_HYBRID,	/* LP4-2ch special */
	HRT_BOUND_NUM,
};

enum HRT_DISP_TYPE {
	HRT_PRIMARY = 0,
	HRT_SECONDARY,
};

enum HRT_PATH_SCENARIO {
	HRT_PATH_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 1),
	HRT_PATH_DUAL_PIPE =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 2),
	HRT_PATH_DUAL_DISP_MIRROR =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 3),
	HRT_PATH_DUAL_DISP_EXT =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 4),
	HRT_PATH_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 5),
	HRT_PATH_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 6),
	HRT_PATH_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 7),
	HRT_PATH_DUAL_PIPE_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 8),
	HRT_PATH_DUAL_PIPE_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 9),
	HRT_PATH_DUAL_PIPE_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 10),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 11),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 12),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE,
		HRT_PATH_DISP_DUAL_MIRROR, 13),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 14),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 15),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 16),
	HRT_PATH_UNKNOWN = MAKE_UNIFIED_HRT_PATH_FMT(0, 0, 0, 17),
	HRT_PATH_NUM = MAKE_UNIFIED_HRT_PATH_FMT(0, 0, 0, 18),
};

enum HRT_DEBUG_LAYER_DATA {
	HRT_LAYER_DATA_ID = 0,
	HRT_LAYER_DATA_SRC_FMT,
	HRT_LAYER_DATA_DST_OFFSET_X,
	HRT_LAYER_DATA_DST_OFFSET_Y,
	HRT_LAYER_DATA_DST_WIDTH,
/*5*/
	HRT_LAYER_DATA_DST_HEIGHT,
	HRT_LAYER_DATA_SRC_WIDTH,
	HRT_LAYER_DATA_SRC_HEIGHT,
	HRT_LAYER_DATA_NUM,
};

enum HRT_SCALE_SCENARIO {
	HRT_SCALE_NONE = 0,
	HRT_SCALE_133,
	HRT_SCALE_150,
	HRT_SCALE_200,
	HRT_SCALE_266,
	HRT_SCALE_UNKNOWN,
	HRT_SCALE_NUM = HRT_SCALE_UNKNOWN,
};

enum HRT_TYPE {
	HRT_TYPE_LARB0 = 0,
	HRT_TYPE_LARB1,
	HRT_TYPE_EMI,
	HRT_TYPE_UNKNOWN,
};

enum HRT_SYS_STATE {
	DISP_HRT_MJC_ON = 0,
	DISP_HRT_FORCE_DUAL_OFF,
	DISP_HRT_MULTI_TUI_ON,
};

enum DISP_DEBUG_LEVEL {
	DISP_DEBUG_LEVEL_CRITICAL = 0,
	DISP_DEBUG_LEVEL_ERR,
	DISP_DEBUG_LEVEL_WARN,
	DISP_DEBUG_LEVEL_DEBUG,
	DISP_DEBUG_LEVEL_INFO,
};

#define HRT_GET_DVFS_LEVEL(hrt_num) (hrt_num & 0xF)
#define HRT_SET_DVFS_LEVEL(hrt_num, value) (hrt_num = ((hrt_num & ~(0xF)) | (value & 0xF)))
#define HRT_GET_SCALE_SCENARIO(hrt_num) ((hrt_num & 0xF0) >> 4)
#define HRT_SET_SCALE_SCENARIO(hrt_num, value) (hrt_num = ((hrt_num & ~(0xF0)) | ((value & 0xF) << 4)))
#define HRT_GET_AEE_FLAG(hrt_num) ((hrt_num & 0x100) >> 8)
#define HRT_SET_AEE_FLAG(hrt_num, value) (hrt_num = ((hrt_num & ~(0x100)) | ((value & 0x1) << 8)))
#define HRT_GET_PATH_SCENARIO(hrt_num) ((hrt_num & 0xFFFF0000) >> 16)
#define HRT_SET_PATH_SCENARIO(hrt_num, value) (hrt_num = ((hrt_num & ~(0xFFFF0000)) | ((value & 0xFFFF) << 16)))
#define HRT_AEE_LAYER_MASK 0xFFFFFFDF
#define HRT_GET_PATH_RSZ_TYPE(hrt_path) ((hrt_path >> PATH_FMT_RSZ_SHIFT) & 0x3)
#define HRT_GET_PATH_DISP_TYPE(hrt_path) ((hrt_path >> PATH_FMT_DISP_SHIFT) & 0x3)
#define HRT_GET_PATH_PIPE_TYPE(hrt_path) ((hrt_path >> PATH_FMT_PIPE_SHIFT) & 0x3)
#define HRT_GET_PATH_ID(hrt_path) (hrt_path & 0x1F)

int dispsys_hrt_calc(struct disp_layer_info *disp_info, int debug_mode);
extern int hdmi_get_dev_info(int is_sf, void *info);
int gen_hrt_pattern(void);
int set_hrt_state(enum HRT_SYS_STATE sys_state, int en);

#endif
