/*
 * Copyright (C) 2015 MediaTek Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef __MTK_STATIC_POWER_MTK6799_H__
#define __MTK_STATIC_POWER_MTK6799_H__

#define V_OF_FUSE		1100
#define T_OF_FUSE		30
#define FAB_INFO6		19
#define FAB_INFO7		99

#define DEF_BIG_LEAKAGE		56
#define DEF_CPULL_LEAKAGE	36
#define DEF_CPUL_LEAKAGE	53
#define DEF_CCI_LEAKAGE		3
#define DEF_GPU_LEAKAGE		93
#define DEF_VCORE_LEAKAGE	94
#define DEF_VMD1_LEAKAGE	26
#define DEF_MODEM_LEAKAGE	27

enum {
	MTK_SPOWER_CPUBIG = 0,
	MTK_SPOWER_CPUBIG_CLUSTER,
	MTK_SPOWER_CPULL,
	MTK_SPOWER_CPULL_CLUSTER,
	MTK_SPOWER_CPUL,
	MTK_SPOWER_CPUL_CLUSTER,
	MTK_SPOWER_CPU_MAX,
	MTK_SPOWER_CCI,
	MTK_SPOWER_GPU,
	MTK_SPOWER_VCORE,
	MTK_SPOWER_VMD1,
	MTK_SPOWER_MODEM,
	MTK_SPOWER_MAX
};

char *spower_name[] = {
	"MTK_SPOWER_CPUBIG",
	"MTK_SPOWER_CPUBIG_CLUSTER",
	"MTK_SPOWER_CPULL",
	"MTK_SPOWER_CPULL_CLUSTER",
	"MTK_SPOWER_CPUL",
	"MTK_SPOWER_CPUL_CLUSTER",
	"MTK_SPOWER_CPU_MAX",
	"MTK_SPOWER_CCI",
	"MTK_SPOWER_GPU",
	"MTK_SPOWER_VCORE",
	"MTK_SPOWER_VMD1",
	"MTK_SPOWER_MODEM",
	"MTK_SPOWER_MAX"
};

enum {
	MTK_BIG_LEAKAGE = 0,
	MTK_LL_LEAKAGE,
	MTK_L_LEAKAGE,
	MTK_CCI_LEAKAGE,
	MTK_GPU_LEAKAGE,
	MTK_VCORE_LEAKAGE,
	MTK_MD1_LEAKAGE,
	MTK_MODEM_LEAKAGE,
	MTK_LEAKAGE_MAX
};

char *leakage_name[] = {
	"MTK_BIG_LEAKAGE",
	"MTK_LL_LEAKAGE",
	"MTK_L_LEAKAGE",
	"MTK_CCI_LEAKAGE",
	"MTK_GPU_LEAKAGE",
	"MTK_VCORE_LEAKAGE",
	"MTK_MD1_LEAKAGE",
	"MTK_MODEM_LEAKAGE"
};

int default_leakage[] = {
	DEF_BIG_LEAKAGE,
	DEF_CPULL_LEAKAGE,
	DEF_CPUL_LEAKAGE,
	DEF_CCI_LEAKAGE,
	DEF_GPU_LEAKAGE,
	DEF_VCORE_LEAKAGE,
	DEF_VMD1_LEAKAGE,
	DEF_MODEM_LEAKAGE
};

int devinfo_idx[] = {
	FAB_INFO6, FAB_INFO6, FAB_INFO7, FAB_INFO6,
	FAB_INFO6, FAB_INFO7, FAB_INFO7, FAB_INFO7
};
int devinfo_offset[] = {
	24, 0, 24, 16,
	8, 16, 8, 0
};

/****************************************************************
 * this table is generated by scramble function.                *
 * (plz refer to DE team.)                                      *
 ****************************************************************/
int devinfo_table[] = {
	3539,   492,    1038,   106,    231,    17,     46,     2179,
	4,      481,    1014,   103,    225,    17,     45,     2129,
	3,      516,    1087,   111,    242,    19,     49,     2282,
	4,      504,    1063,   108,    236,    18,     47,     2230,
	4,      448,    946,    96,     210,    15,     41,     1986,
	2,      438,    924,    93,     205,    14,     40,     1941,
	2,      470,    991,    101,    220,    16,     43,     2080,
	3,      459,    968,    98,     215,    16,     42,     2033,
	3,      594,    1250,   129,    279,    23,     57,     2621,
	6,      580,    1221,   126,    273,    22,     56,     2561,
	6,      622,    1309,   136,    293,    24,     60,     2745,
	7,      608,    1279,   132,    286,    23,     59,     2683,
	6,      541,    1139,   117,    254,    20,     51,     2390,
	5,      528,    1113,   114,    248,    19,     50,     2335,
	4,      566,    1193,   123,    266,    21,     54,     2503,
	5,      553,    1166,   120,    260,    21,     53,     2446,
	5,      338,    715,    70,     157,    9,      29,     1505,
	3153,   330,    699,    69,     153,    9,      28,     1470,
	3081,   354,    750,    74,     165,    10,     31,     1576,
	3302,   346,    732,    72,     161,    10,     30,     1540,
	3227,   307,    652,    63,     142,    8,      26,     1371,
	2875,   300,    637,    62,     139,    7,      25,     1340,
	2809,   322,    683,    67,     149,    8,      27,     1436,
	3011,   315,    667,    65,     146,    8,      26,     1404,
	2942,   408,    862,    86,     191,    13,     37,     1811,
	1,      398,    842,    84,     186,    12,     36,     1769,
	1,      428,    903,    91,     200,    14,     39,     1896,
	2,      418,    882,    89,     195,    13,     38,     1853,
	2,      371,    785,    78,     173,    11,     33,     1651,
	3458,   363,    767,    76,     169,    10,     32,     1613,
	3379,   389,    823,    82,     182,    12,     35,     1729,
	1,      380,    804,    80,     177,    11,     34,     1689,
};

#endif
